# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import sys
import pulumi
import pulumi.runtime
from typing import Optional, Union

if sys.version_info >= (3, 11):
    pass
else:
    pass
from . import _utilities

__all__ = [
    'GetApikeysResult',
    'AwaitableGetApikeysResult',
    'get_apikeys',
    'get_apikeys_output',
]

@pulumi.output_type
class GetApikeysResult:
    """
    A collection of values returned by getApikeys.
    """
    def __init__(__self__, anon_key=None, id=None, project_ref=None, service_role_key=None):
        if anon_key and not isinstance(anon_key, str):
            raise TypeError("Expected argument 'anon_key' to be a str")
        pulumi.set(__self__, "anon_key", anon_key)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_ref and not isinstance(project_ref, str):
            raise TypeError("Expected argument 'project_ref' to be a str")
        pulumi.set(__self__, "project_ref", project_ref)
        if service_role_key and not isinstance(service_role_key, str):
            raise TypeError("Expected argument 'service_role_key' to be a str")
        pulumi.set(__self__, "service_role_key", service_role_key)

    @property
    @pulumi.getter(name="anonKey")
    def anon_key(self) -> str:
        return pulumi.get(self, "anon_key")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectRef")
    def project_ref(self) -> str:
        return pulumi.get(self, "project_ref")

    @property
    @pulumi.getter(name="serviceRoleKey")
    def service_role_key(self) -> str:
        return pulumi.get(self, "service_role_key")


class AwaitableGetApikeysResult(GetApikeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApikeysResult(
            anon_key=self.anon_key,
            id=self.id,
            project_ref=self.project_ref,
            service_role_key=self.service_role_key)


def get_apikeys(project_ref: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApikeysResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['projectRef'] = project_ref
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('supabase:index/getApikeys:getApikeys', __args__, opts=opts, typ=GetApikeysResult, package_ref=_utilities.get_package()).value

    return AwaitableGetApikeysResult(
        anon_key=pulumi.get(__ret__, 'anon_key'),
        id=pulumi.get(__ret__, 'id'),
        project_ref=pulumi.get(__ret__, 'project_ref'),
        service_role_key=pulumi.get(__ret__, 'service_role_key'))
def get_apikeys_output(project_ref: Optional[pulumi.Input[str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApikeysResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['projectRef'] = project_ref
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('supabase:index/getApikeys:getApikeys', __args__, opts=opts, typ=GetApikeysResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetApikeysResult(
        anon_key=pulumi.get(__response__, 'anon_key'),
        id=pulumi.get(__response__, 'id'),
        project_ref=pulumi.get(__response__, 'project_ref'),
        service_role_key=pulumi.get(__response__, 'service_role_key')))
