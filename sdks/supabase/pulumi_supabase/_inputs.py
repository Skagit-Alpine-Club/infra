# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'BranchDatabaseArgs',
    'BranchDatabaseArgsDict',
]

MYPY = False

if not MYPY:
    class BranchDatabaseArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        """
        Host
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Branch project ref
        """
        jwt_secret: NotRequired[pulumi.Input[str]]
        """
        JWT secret
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Password
        """
        port: NotRequired[pulumi.Input[float]]
        """
        Port
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Status
        """
        user: NotRequired[pulumi.Input[str]]
        """
        User
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Postgres version
        """
elif False:
    BranchDatabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BranchDatabaseArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 jwt_secret: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Host
        :param pulumi.Input[str] id: Branch project ref
        :param pulumi.Input[str] jwt_secret: JWT secret
        :param pulumi.Input[str] password: Password
        :param pulumi.Input[float] port: Port
        :param pulumi.Input[str] status: Status
        :param pulumi.Input[str] user: User
        :param pulumi.Input[str] version: Postgres version
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jwt_secret is not None:
            pulumi.set(__self__, "jwt_secret", jwt_secret)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Branch project ref
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="jwtSecret")
    def jwt_secret(self) -> Optional[pulumi.Input[str]]:
        """
        JWT secret
        """
        return pulumi.get(self, "jwt_secret")

    @jwt_secret.setter
    def jwt_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_secret", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        Port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Postgres version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


