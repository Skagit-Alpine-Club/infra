# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import sys
import pulumi
import pulumi.runtime
from typing import Optional, overload
if sys.version_info >= (3, 11):
    pass
else:
    pass
from . import _utilities

__all__ = ['SettingsArgs', 'Settings']

@pulumi.input_type
class SettingsArgs:
    def __init__(__self__, *,
                 project_ref: pulumi.Input[str],
                 api: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 pooler: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Settings resource.
        :param pulumi.Input[str] project_ref: Project reference ID
        :param pulumi.Input[str] api: API settings as [serialised JSON](https://api.supabase.com/api/v1#/services/updatePostgRESTConfig)
        :param pulumi.Input[str] auth: Auth settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateV1AuthConfig)
        :param pulumi.Input[str] database: Database settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateConfig)
        :param pulumi.Input[str] network: Network settings as serialised JSON
        :param pulumi.Input[str] pooler: Pooler settings as serialised JSON
        :param pulumi.Input[str] storage: Storage settings as serialised JSON
        """
        pulumi.set(__self__, "project_ref", project_ref)
        if api is not None:
            pulumi.set(__self__, "api", api)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if pooler is not None:
            pulumi.set(__self__, "pooler", pooler)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="projectRef")
    def project_ref(self) -> pulumi.Input[str]:
        """
        Project reference ID
        """
        return pulumi.get(self, "project_ref")

    @project_ref.setter
    def project_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_ref", value)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input[str]]:
        """
        API settings as [serialised JSON](https://api.supabase.com/api/v1#/services/updatePostgRESTConfig)
        """
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        """
        Auth settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateV1AuthConfig)
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Database settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateConfig)
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        Network settings as serialised JSON
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def pooler(self) -> Optional[pulumi.Input[str]]:
        """
        Pooler settings as serialised JSON
        """
        return pulumi.get(self, "pooler")

    @pooler.setter
    def pooler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pooler", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage settings as serialised JSON
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class _SettingsState:
    def __init__(__self__, *,
                 api: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 pooler: Optional[pulumi.Input[str]] = None,
                 project_ref: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Settings resources.
        :param pulumi.Input[str] api: API settings as [serialised JSON](https://api.supabase.com/api/v1#/services/updatePostgRESTConfig)
        :param pulumi.Input[str] auth: Auth settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateV1AuthConfig)
        :param pulumi.Input[str] database: Database settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateConfig)
        :param pulumi.Input[str] network: Network settings as serialised JSON
        :param pulumi.Input[str] pooler: Pooler settings as serialised JSON
        :param pulumi.Input[str] project_ref: Project reference ID
        :param pulumi.Input[str] storage: Storage settings as serialised JSON
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if pooler is not None:
            pulumi.set(__self__, "pooler", pooler)
        if project_ref is not None:
            pulumi.set(__self__, "project_ref", project_ref)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input[str]]:
        """
        API settings as [serialised JSON](https://api.supabase.com/api/v1#/services/updatePostgRESTConfig)
        """
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        """
        Auth settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateV1AuthConfig)
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Database settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateConfig)
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        Network settings as serialised JSON
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def pooler(self) -> Optional[pulumi.Input[str]]:
        """
        Pooler settings as serialised JSON
        """
        return pulumi.get(self, "pooler")

    @pooler.setter
    def pooler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pooler", value)

    @property
    @pulumi.getter(name="projectRef")
    def project_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Project reference ID
        """
        return pulumi.get(self, "project_ref")

    @project_ref.setter
    def project_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_ref", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage settings as serialised JSON
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


class Settings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 pooler: Optional[pulumi.Input[str]] = None,
                 project_ref: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Settings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api: API settings as [serialised JSON](https://api.supabase.com/api/v1#/services/updatePostgRESTConfig)
        :param pulumi.Input[str] auth: Auth settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateV1AuthConfig)
        :param pulumi.Input[str] database: Database settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateConfig)
        :param pulumi.Input[str] network: Network settings as serialised JSON
        :param pulumi.Input[str] pooler: Pooler settings as serialised JSON
        :param pulumi.Input[str] project_ref: Project reference ID
        :param pulumi.Input[str] storage: Storage settings as serialised JSON
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Settings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 pooler: Optional[pulumi.Input[str]] = None,
                 project_ref: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingsArgs.__new__(SettingsArgs)

            __props__.__dict__["api"] = api
            __props__.__dict__["auth"] = auth
            __props__.__dict__["database"] = database
            __props__.__dict__["network"] = network
            __props__.__dict__["pooler"] = pooler
            if project_ref is None and not opts.urn:
                raise TypeError("Missing required property 'project_ref'")
            __props__.__dict__["project_ref"] = project_ref
            __props__.__dict__["storage"] = storage
        super(Settings, __self__).__init__(
            'supabase:index/settings:Settings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api: Optional[pulumi.Input[str]] = None,
            auth: Optional[pulumi.Input[str]] = None,
            database: Optional[pulumi.Input[str]] = None,
            network: Optional[pulumi.Input[str]] = None,
            pooler: Optional[pulumi.Input[str]] = None,
            project_ref: Optional[pulumi.Input[str]] = None,
            storage: Optional[pulumi.Input[str]] = None) -> 'Settings':
        """
        Get an existing Settings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api: API settings as [serialised JSON](https://api.supabase.com/api/v1#/services/updatePostgRESTConfig)
        :param pulumi.Input[str] auth: Auth settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateV1AuthConfig)
        :param pulumi.Input[str] database: Database settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateConfig)
        :param pulumi.Input[str] network: Network settings as serialised JSON
        :param pulumi.Input[str] pooler: Pooler settings as serialised JSON
        :param pulumi.Input[str] project_ref: Project reference ID
        :param pulumi.Input[str] storage: Storage settings as serialised JSON
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingsState.__new__(_SettingsState)

        __props__.__dict__["api"] = api
        __props__.__dict__["auth"] = auth
        __props__.__dict__["database"] = database
        __props__.__dict__["network"] = network
        __props__.__dict__["pooler"] = pooler
        __props__.__dict__["project_ref"] = project_ref
        __props__.__dict__["storage"] = storage
        return Settings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def api(self) -> pulumi.Output[Optional[str]]:
        """
        API settings as [serialised JSON](https://api.supabase.com/api/v1#/services/updatePostgRESTConfig)
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Output[Optional[str]]:
        """
        Auth settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateV1AuthConfig)
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[Optional[str]]:
        """
        Database settings as [serialised JSON](https://api.supabase.com/api/v1#/projects%20config/updateConfig)
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[Optional[str]]:
        """
        Network settings as serialised JSON
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def pooler(self) -> pulumi.Output[Optional[str]]:
        """
        Pooler settings as serialised JSON
        """
        return pulumi.get(self, "pooler")

    @property
    @pulumi.getter(name="projectRef")
    def project_ref(self) -> pulumi.Output[str]:
        """
        Project reference ID
        """
        return pulumi.get(self, "project_ref")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[Optional[str]]:
        """
        Storage settings as serialised JSON
        """
        return pulumi.get(self, "storage")

