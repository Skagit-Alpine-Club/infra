# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'BranchDatabase',
    'GetBranchBranchResult',
]

@pulumi.output_type
class BranchDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jwtSecret":
            suggest = "jwt_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BranchDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BranchDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BranchDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 jwt_secret: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[float] = None,
                 status: Optional[str] = None,
                 user: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str host: Host
        :param str id: Branch project ref
        :param str jwt_secret: JWT secret
        :param str password: Password
        :param float port: Port
        :param str status: Status
        :param str user: User
        :param str version: Postgres version
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jwt_secret is not None:
            pulumi.set(__self__, "jwt_secret", jwt_secret)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Branch project ref
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jwtSecret")
    def jwt_secret(self) -> Optional[str]:
        """
        JWT secret
        """
        return pulumi.get(self, "jwt_secret")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[float]:
        """
        Port
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Postgres version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetBranchBranchResult(dict):
    def __init__(__self__, *,
                 git_branch: str,
                 id: str,
                 project_ref: str):
        """
        :param str git_branch: Git branch
        :param str id: Branch identifier
        :param str project_ref: Branch project ref
        """
        pulumi.set(__self__, "git_branch", git_branch)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "project_ref", project_ref)

    @property
    @pulumi.getter(name="gitBranch")
    def git_branch(self) -> str:
        """
        Git branch
        """
        return pulumi.get(self, "git_branch")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Branch identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectRef")
    def project_ref(self) -> str:
        """
        Branch project ref
        """
        return pulumi.get(self, "project_ref")


